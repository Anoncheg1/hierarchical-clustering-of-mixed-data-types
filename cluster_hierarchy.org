
#+STARTUP: inlineimages

https://www.youtube.com/watch?v=Oeon9f-Xx78&list=PLYpF5d40XgQODkJztO4saO_k_1LTi2YMk&index=3

#+NAME: Distance
#+begin_src python :results output :session a
import pandas as pd
import numpy as np
from scipy.cluster.vq import whiten
from scipy.spatial.distance import pdist
from scipy.spatial.distance import squareform


v1=list("0101010101010101") # 2
v2=list("0202020202010101") # 3
v3=list("0202020212121212") # 3

df = pd.DataFrame({"v1":v1, "v2":v2, "v3":v3}).astype(int)

numbers_prepared = whiten( obs = df ) # divided by standard deviation per feature

dist= pdist(X=numbers_prepared, metric='euclidean')
# dist= pdist(X=df, metric='euclidean')

sq = squareform(dist)
print("we have 16 observations, df.shape:", df.shape)
print("column 1, row 0 is distance between and 0 and 1 or 1 and 0 observation")
print("triangle is a one dimension comparision")
print(np.triu(np.round(sq,0)))
#+end_src

/results/: Distance
#+begin_example
we have 16 observations, df.shape: (16, 3)
column 1, row 0 is distance between and 0 and 1 or 1 and 0 observation
triangle is a one dimension comparision
[[0. 4. 0. 4. 0. 4. 0. 4. 1. 4. 1. 3. 1. 3. 1. 3.]
 [0. 0. 4. 0. 4. 0. 4. 0. 3. 0. 3. 1. 3. 1. 3. 1.]
 [0. 0. 0. 4. 0. 4. 0. 4. 1. 4. 1. 3. 1. 3. 1. 3.]
 [0. 0. 0. 0. 4. 0. 4. 0. 3. 0. 3. 1. 3. 1. 3. 1.]
 [0. 0. 0. 0. 0. 4. 0. 4. 1. 4. 1. 3. 1. 3. 1. 3.]
 [0. 0. 0. 0. 0. 0. 4. 0. 3. 0. 3. 1. 3. 1. 3. 1.]
 [0. 0. 0. 0. 0. 0. 0. 4. 1. 4. 1. 3. 1. 3. 1. 3.]
 [0. 0. 0. 0. 0. 0. 0. 0. 3. 0. 3. 1. 3. 1. 3. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 3. 0. 3. 0. 3. 0. 3.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 3. 1. 3. 1. 3. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 3. 0. 3. 0. 3.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 3. 0. 3. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 3. 0. 3.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 3. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 3.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
#+end_example


#+NAME: Linkage
#+begin_src python :results output :session a
from scipy.cluster.hierarchy import linkage, dendrogram
l = linkage(y=df, method='complete', metric='jaccard', optimal_ordering=False)
[print(i+len(df), np.round(x,1)) for i, x in enumerate(l)]
#+end_src

/results/: Linkage
#+begin_example
16 [0. 2. 0. 2.]
17 [1. 3. 0. 2.]
18 [ 4. 16.  0.  3.]
19 [ 5. 17.  0.  3.]
20 [ 6. 18.  0.  4.]
21 [ 7. 19.  0.  4.]
22 [ 9. 21.  0.  5.]
23 [ 8. 10.  0.  2.]
24 [11. 13.  0.  2.]
25 [15. 24.  0.  3.]
26 [12. 23.  0.  3.]
27 [14. 26.  0.  4.]
28 [22.  25.   0.3  8. ]
29 [20. 27.  1.  8.]
30 [28. 29.  1. 16.]
#+end_example

#+NAME: cophentic correlation distance and Cophenetic distance matrix
#+begin_src python :results output :session a
# --- Cophenetic correlation
from scipy.cluster.hierarchy import cophenet
a = cophenet(Z=l, Y=dist)
print(a[0])
# print(a[1])
print(np.round(a[1],1))

#+end_src

/results/: cophentic correlation distance and Cophenetic distance matrix
: 0.8447869686967139
: [1.  0.  1.  0.  1.  0.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  0.  1.
:  0.  1.  0.  1.  0.  1.  0.3 1.  0.3 1.  0.3 1.  0.  1.  0.  1.  1.  1.
:  1.  1.  1.  1.  1.  1.  1.  0.  1.  0.  1.  0.  1.  0.3 1.  0.3 1.  0.3
:  1.  0.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  0.  1.  0.  1.  0.3 1.
:  0.3 1.  0.3 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  0.  1.  0.3 1.  0.3
:  1.  0.3 1.  0.  1.  0.  1.  0.  1.  1.  0.3 1.  0.3 1.  0.3 1.  0.  1.
:  0.  1.  1.  0.  1.  0.  1.  0.  1.  1.  0.  1. ]


: #+begin_src python :results output :session a
#+NAME: Dendrogram
#+begin_src python :results file graphics :session a :file images/cluster_hierarchy_dendrogram.png

from matplotlib import pyplot as plt
dendrogram(Z=l, p=1.1, truncate_mode='level', labels=df.index, count_sort=False, distance_sort=False, orientation='right', leaf_font_size=15)
plt.savefig('images/cluster_hierarchy_dendrogram.png')
plt.close()
#+end_src

/results/: Dendrogram
[[file:images/cluster_hierarchy_dendrogram.png]]
